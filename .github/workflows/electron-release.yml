name: Neurite Desktop Release

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type (draft, prerelease, final)'
        required: false
        default: 'draft'

jobs:
  set-version:
    runs-on: ubuntu-latest
    outputs:
      timestamp: ${{ steps.version.outputs.timestamp }}
      tag: ${{ steps.version.outputs.tag }}
      draft: ${{ steps.version.outputs.draft }}
      prerelease: ${{ steps.version.outputs.prerelease }}
    steps:
      - name: Generate timestamped version
        id: version
        run: |
          timestamp=$(date +'%Y.%m.%d.%H%M%S')
          echo "timestamp=$timestamp" >> $GITHUB_OUTPUT
          echo "tag=electron-$timestamp" >> $GITHUB_OUTPUT

          if [[ "${{ github.event.inputs.release_type }}" == "draft" ]]; then
            echo "draft=true" >> $GITHUB_OUTPUT
            echo "prerelease=false" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.inputs.release_type }}" == "prerelease" ]]; then
            echo "draft=false" >> $GITHUB_OUTPUT
            echo "prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "draft=false" >> $GITHUB_OUTPUT
            echo "prerelease=false" >> $GITHUB_OUTPUT
          fi

  build:
    needs: set-version
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    env:
      RELEASE_VERSION: ${{ needs.set-version.outputs.timestamp }}
    steps:
      - name: Checkout electron branch
        uses: actions/checkout@v3
        with:
          ref: electron

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install

      - name: Set embedded version
        run: npm run set-version "${{ env.RELEASE_VERSION }}"

      - name: Build Electron app
        run: |
          case "${{ matrix.os }}" in
            macos-latest)   npm run build -- --mac --publish=never ;;
            windows-latest) npm run build -- --win --publish=never ;;
            ubuntu-latest)  npm run build -- --linux --publish=never ;;
          esac

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }}
          path: |
            dist/**/*.dmg
            dist/**/*.exe
            dist/**/*.AppImage

  publish-release:
    needs: [build, set-version]
    runs-on: ubuntu-latest
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v3
        with:
          path: release

      - name: List downloaded files
        run: find release

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.set-version.outputs.tag }}
          name: Neurite Desktop ${{ needs.set-version.outputs.timestamp }}
          body: |
            Electron desktop release for version ${{ needs.set-version.outputs.timestamp }}.
          draft: ${{ needs.set-version.outputs.draft }}
          prerelease: ${{ needs.set-version.outputs.prerelease }}
          files: release/**/*  # safe for all platforms
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  cleanup:
    needs: [publish-release, set-version]
    if: needs.set-version.outputs.draft == 'false' && needs.set-version.outputs.prerelease == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: Install GitHub CLI
        run: |
          sudo apt update
          sudo apt install -y gh jq

      - name: Authenticate GH CLI
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Delete old electron-* releases (keep latest)
        run: |
          gh release list --limit 100 --json tagName,createdAt \
          | jq -r '.[] | select(.tagName | startswith("electron-")) | "\(.createdAt) \(.tagName)"' \
          | sort -r \
          | tail -n +2 \
          | awk '{print $2}' \
          | xargs -r -n 1 gh release delete -y
