name: Localhost Servers Release

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type (draft or final)'
        required: false
        default: 'draft'

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Generate timestamp version
        id: version
        run: |
          timestamp=$(date +'%Y.%m.%d.%H%M%S')
          echo "timestamp=$timestamp" >> $GITHUB_OUTPUT
          echo "tag=servers-$timestamp" >> $GITHUB_OUTPUT

      - name: Install root dependencies
        run: npm install
        working-directory: localhost_servers

      - name: Install dependencies per server
        run: |
          node -e "
            const fs = require('fs');
            const path = require('path');
            const servers = JSON.parse(fs.readFileSync('localhost_servers/servers.json', 'utf8'));
            for (const server of servers) {
              if (server.startNeurite) continue;
              const dir = path.join('localhost_servers', server.dir);
              console.log('Installing in', dir);
              require('child_process').execSync('npm install', {
                cwd: dir,
                stdio: 'inherit'
              });
            }
          "

      - name: Create servers.zip (tracked files only)
        run: |
          mkdir release
          git ls-files localhost_servers | zip -@ release/servers.zip

      - name: Install GitHub CLI
        run: |
          sudo apt update
          sudo apt install -y gh

      - name: Authenticate GH CLI
        run: echo "${GH_TOKEN}" | gh auth login --with-token
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create new dated release
        run: |
          gh release create ${{ steps.version.outputs.tag }} release/servers.zip \
            --title "Localhost Servers ${{ steps.version.outputs.timestamp }}" \
            --notes "Current release of Neurite's localhost servers" \
            ${{ github.event.inputs.release_type == 'draft' && '--draft' || '' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete older servers-* releases (keep latest)
        if: github.event.inputs.release_type != 'draft'
        run: |
          gh release list --limit 100 --json tagName,createdAt \
          | jq -r '.[] | select(.tagName | startswith("servers-")) | "\(.createdAt) \(.tagName)"' \
          | sort -r \
          | tail -n +2 \
          | awk '{print $2}' \
          | xargs -r -n 1 gh release delete -y
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
